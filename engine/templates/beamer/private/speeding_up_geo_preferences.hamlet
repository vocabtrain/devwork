<div .slide>
    <h1>Combining Routes
    <p>
        If we want to calculate 
        \\[ \pareto{\mathtt{ONROUTE }\; \vec{AB}}{\mathtt{ONROUTE }\; \vec{BC}} \]
        with two <code>ST_LineString</code>s \( \vec{AB}, \vec{BC}\), then we could combine the linestrings as 
        \\[ \vec{AC} :=  \mathtt{ST\_LineStringAggr}\; \left( \vec{AB}, \vec{BC} \right) \]
        and form the expression
        \\[ \mathtt{ONROUTE} \; \vec{AC} \]
<div .slide>
    <h1>Combining Areas
    <p>
        For
        \\[ \pareto{\mathtt{WITHIN }\; p_1 }{\mathtt{WITHIN }\; p_2} \]
        with two intersecting polygons \(p_1, p_2 : p_1 \cap p_2 \neq \emptyset\) we could construct a new polygon
        \\[ p := p_1 \cup p_2 \]
        so that our preference can be simplified to
        \\[ \mathtt{WITHIN }\; p \]

<div .slide>
    <h1>Geo-Caching: Current Situation
    <ul>
        <li>Preference SQL can cache the results of a geo-preference-query.
        <li>Currently the cache can only be used when invoking the same query again.
        <li>This kind of use is problematic!
            <ul>
                <li>Current architecture:
                    <ul>
                        <li>Many users for one server.
                        <li>\(\Rightarrow\) Caching benefit is marginal in respect to tremendous need of memory
                <li>Desired solution
                    <ul>
                        <li>If a query is invoked from a nearly point already cached, use this cache to boost up the preference!
                        <li>\(\Rightarrow\) Preferences with movements can be much faster calculated

<div .slide>
    <h1>Pruning Filter for Net-Distances
    <h2>Idea
    <p> Do not calculate the net distance if it is <i>obvious</i> that \( \distance{q}{a} \ll \distance{q}{b} \).
    <ul>
        <li>Pre-Caching: Calculate the net distance between POIs.
        <li>Pruning: Use the cache to determine the obvious.
    <p>
        <b>Problem:
        The net-distance is a non-symmetric distance, but it holds the triangular-inequality.
    <h2>Generating the cache
    <ul>
        <li>Let \(\Omega\) denote the set of points of interests (e.g. pivot elements).
        <li>Generate a matrix of all netdistances \( \left( \distance{p_i}{p_j} \right)_\{i,j} \; \forall p_i,p_j \in \Omega \)
        <li>Note: The matrix is non-symmetric like \( d \).
<div .slide>
    <h1>New (symmetric) distances
    <ul>
        <li>We like to introduce two new distances \( \hat{d}, \check{d} \) which will help us to measure the <i>obvious</i>.
        <li> These distances shall have the property that
            \\[ \distanceC{a}{b} \le \distance{a}{b} \le \distanceH{a}{b} \]
    <p>
        <b>Motivation
    <ul>
        <li>
            We have a query point \( q \) and two points \(p_1, p_2 \in \Omega \) 
            and want to compare  \( \distance{q}{p_1} \) and \( \distance{q}{p_2} \).
        <li>
            If we already know that \( \distanceH{q}{p_1} \le \distanceC{q}{p_2} \), 
            it is obvious that \( \distance{q}{p_1} \le  \distance{q}{p_2} \).

<div .slide>
    <h1>Defining the distances
    <ul>
        <li>
            For a query point \( q \) we choose the nearest pivot element of \( \Omega \) w.r.t. \( q \), e.g.
            \\[ p := \textrm{minarg}_\{p \in \Omega} \max \menge{ \distance{p}{q}, \distance{q}{p} } \]
        <li>
            Now we can define our two distances which depend on \( p \).
            The first one
            \\[ \distanceH{q}{o} := \distance{q}{p} + \distance{p}{o} \]
            yields our desired property as the triangulary-inequation for \( d \) holds.
        <li>
            For the second, exploiting again the triangulary-inequation we can define
            \\[ \distanceC{q}{o} := \max \menge{ \distance{q}{p} - \distance{o}{p}, \distance{p}{o} - \distance{p}{q} } \]
            In particular we have \( \norm{q - o}{2} \le \distanceC{q}{o} \) 
            as the Euclidian metric is the smallest possible distance in terms of net metrices.
        <li>Clearly, for all \( o \in \Omega \) we can now exploit our previously calculated net-distance-matrix.

<div .slide>
    <h1>Unleashing the Power of Dijkstra I
    <p>Current Situation
    <ul>
        <li>
            Search of a NEARBY-Preference is coupled by a call of the pgrouting-function
            <br>
            <pre>
                <code .C>
                    shortest_path(sql text, source_id integer, target_id integer, ...)
        <li>
            <kbd>shortest_path
            is using the Dijkstra-Algorithm to calculate the net distance between 
            <kbd>source_id
            and
            <kbd>target_id
        <li>We have to call this function for each POI - this is inefficient!

<div .slide>
    <h1>Unleashing the Power of Dijkstra II
    <p>Desired Situation
    <ul>
        <li>Dijkstra can be modified to solve the "single source multiple destinations shortest path"-problem
        <li>
            Given a set of POIs
            <kbd>target_ids
            , we want to get a list of \( \left( \distance{\textrm{source_id}}{\textrm{target_ids}_j} \right)_j \)
        <li>We only want to call a routing function one time to retrieve all necessary data for a NEARBY-preference.
<div .slide>
    <h1>Dijkstra: Pareto meets Nearby
    <p>
        We can combine a complex preference expression of the form
        \\[ \pareto{\textrm{nearby}(x)}{\textrm{nearby}(y)} \left[ \otimes \textrm{nearby}(z) ...\right] \]
        to a single preference constructor
        \\[ \textrm{nearbyMulti}(x,y,...) \]
        by adding concurrency to Dijkstra - see
        <q>Multi-source Skyline Query Processing in Road Networks 
        by Ke Deng, Xiaofang Zhou, Heng Tao Shen


<div .slide>
    <h1>Conclusion
    <p>We're speeding up
    <ul>
        <li>POI Search by
            <ul>
                <li>apriori-pruning
                <li>multi-destination Dijkstra
        <li>Trajectorial searches
        <li>Pareto-NEARBY queries

